process {
    executor = 'slurm'
    array = 96
    errorStrategy = { task.exitStatus in ((130..145) + 104) ? 'retry' : 'finish' }
}

executor {
    name            = "slurm"
    pollInterval    = '60 sec'
    submitRateLimit = '60/1min'
    queueSize       = 100
    jobName         = {
        task.name
            .replace("[", "(")
            .replace("]", ")")
            .replace(" ", "_")
    }
}

params {
        max_memory='249G'
        max_cpus=64
        max_time='168h'
        publish_dir_mode = 'link'
}
apptainer {
        enabled=true
        autoMounts=true
        runOptions = "-B /project/ctb-noncodo/Platform/references"
        libraryDir = "$HOME/scratch/apptainer_lib/"
        cacheDir = "$HOME/scratch/apptainer_cache/"
}


// Function to check the maximum ressources in DRAC
def check_max(obj, type) {
    if (type == 'memory') {
        try {
            if (obj.compareTo(params.max_memory as nextflow.util.MemoryUnit) == 1)
                return params.max_memory as nextflow.util.MemoryUnit
            else
                return obj
        } catch (all) {
            println "   ### ERROR ###   Max memory '${params.max_memory}' is not valid! Using default value: $obj"
            return obj
        }
    } else if (type == 'time') {
        try {
            if (obj.compareTo(params.max_time as nextflow.util.Duration) == 1)
                return params.max_time as nextflow.util.Duration
            else
                return obj
        } catch (all) {
            println "   ### ERROR ###   Max time '${params.max_time}' is not valid! Using default value: $obj"
            return obj
        }
    } else if (type == 'cpus') {
        try {
            return Math.min( obj, params.max_cpus as int )
        } catch (all) {
            println "   ### ERROR ###   Max cpus '${params.max_cpus}' is not valid! Using default value: $obj"
            return obj
        }
    }
}
