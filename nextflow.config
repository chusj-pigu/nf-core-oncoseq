/*
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    nf-core/oncoseq Nextflow config file
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Default config options for all compute environments
----------------------------------------------------------------------------------------
*/

// Load parameters config
includeConfig 'conf/params.config'

// Load base.config by default for all pipelines
includeConfig 'conf/base.config'

// Load mpgi specific ressources config
includeConfig 'conf/resources/cpus.config'
includeConfig 'conf/resources/gpus.config'
includeConfig 'conf/resources/memory.config'
includeConfig 'conf/resources/time.config'

// Load nf-core profiles
includeConfig 'conf/profiles/nf-core-defaults.config'

// Load igenomes.config for loading AWS genomes function
includeConfig 'conf/igenomes.config'

// TODO: Verify if we can further compartmentalize these data.

profiles {
    test       { includeConfig 'conf/profiles/test.config'                }
    test_full  { includeConfig 'conf/profiles/test_full.config'           }
    drac       { includeConfig 'conf/profiles/drac.config'       }
    test_drac  { includeConfig 'conf/profiles/test_drac.config'  }
    mpgi_local { includeConfig 'conf/profiles/mpgi_local.config' }
}

// Load nf-core custom profiles from different Institutions
includeConfig !System.getenv('NXF_OFFLINE') && params.custom_config_base ? "${params.custom_config_base}/nfcore_custom.config" : "/dev/null"

// Load nf-core/oncoseq custom profiles from different institutions.
// includeConfig !System.getenv('NXF_OFFLINE') && params.custom_config_base ? "${params.custom_config_base}/pipeline/oncoseq.config" : "/dev/null"

includeConfig 'conf/defaults.config'

includeConfig 'conf/manifest.config'

includeConfig 'conf/validation.config'

// Nextflow plugins
plugins {
    id 'nf-schema@2.3.0' // Validation of pipeline parameters and creation of an input channel from a sample sheet
}

// Load modules.config for DSL2 module specific options
includeConfig 'conf/modules.config'

// Function to check the maximum ressources in DRAC
// Note funcitons must be in the top level config file
def check_max(obj, type) {
    if (type == 'memory') {
        try {
            if (obj.compareTo(params.max_memory as nextflow.util.MemoryUnit) == 1)
                return params.max_memory as nextflow.util.MemoryUnit
            else
                return obj
        } catch (all) {
            println "   ### ERROR ###   Max memory '${params.max_memory}' is not valid! Using default value: $obj"
            return obj
        }
    } else if (type == 'time') {
        try {
            if (obj.compareTo(params.max_time as nextflow.util.Duration) == 1)
                return params.max_time as nextflow.util.Duration
            else
                return obj
        } catch (all) {
            println "   ### ERROR ###   Max time '${params.max_time}' is not valid! Using default value: $obj"
            return obj
        }
    } else if (type == 'cpus') {
        try {
            return Math.min( obj, params.max_cpus as int )
        } catch (all) {
            println "   ### ERROR ###   Max cpus '${params.max_cpus}' is not valid! Using default value: $obj"
            return obj
        }
    }
}
