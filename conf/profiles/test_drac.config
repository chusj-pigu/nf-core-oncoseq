process {
        withLabel:gpu_high {
        array = 2
        executor = 'slurm'
        containerOptions = "--nv"
        clusterOptions = "--gpus-per-node=1"
        time = { check_max( 1.h * task.attempt, 'time' ) }
        memory = { check_max( 10.GB * task.attempt, 'memory' ) }
        cpus = { check_max( 6 * task.attempt, 'cpus' ) }
        errorStrategy = { task.exitStatus in ((130..145) + 104) ? 'retry' : 'finish' }
    }
        withLabel:'mid_low_all:low_mem_long:mid_all:mid_fast' {
        array = 96
        executor = 'slurm'
        time = { check_max( 1.h * task.attempt, 'time' ) }
        memory = { check_max( 5.GB * task.attempt, 'memory' ) }
        cpus = { check_max( 5 * task.attempt, 'cpus' ) }
        errorStrategy = { task.exitStatus in ((130..145) + 104) ? 'retry' : 'finish' }
    }
        withLabel:'high_fast:high_all:high_mem_mid' {
        array = 96
        executor = 'slurm'
        time = { check_max( 3.h * task.attempt, 'time' ) }
        memory = { check_max( 10.GB * task.attempt, 'memory' ) }
        cpus = { check_max( 10 * task.attempt, 'cpus' ) }
        errorStrategy = { task.exitStatus in ((130..145) + 104) ? 'retry' : 'finish' }
    }
}
params {
        max_memory='249G'
        max_cpus=64
        max_time='168h'
        publish_dir_mode = 'link'
}
apptainer {
        enabled=true
        autoMounts=true
        runOptions = "-B /project/ctb-noncodo/Platform/references"
        libraryDir = "/project/ctb-noncodo/Platform/references/apptainer/images"
        cacheDir = "/project/ctb-noncodo/Platform/references/apptainer/cache"
}

// Function to check the maximum ressources in DRAC
def check_max(obj, type) {
    if (type == 'memory') {
    try {
        if (obj.compareTo(params.max_memory as nextflow.util.MemoryUnit) == 1)
        return params.max_memory as nextflow.util.MemoryUnit
        else
        return obj
    } catch (all) {
        println "   ### ERROR ###   Max memory '${params.max_memory}' is not valid! Using default value: $obj"
        return obj
    }
    } else if (type == 'time') {
    try {
        if (obj.compareTo(params.max_time as nextflow.util.Duration) == 1)
        return params.max_time as nextflow.util.Duration
        else
        return obj
    } catch (all) {
        println "   ### ERROR ###   Max time '${params.max_time}' is not valid! Using default value: $obj"
        return obj
    }
    } else if (type == 'cpus') {
    try {
        return Math.min( obj, params.max_cpus as int )
    } catch (all) {
        println "   ### ERROR ###   Max cpus '${params.max_cpus}' is not valid! Using default value: $obj"
        return obj
    }
    }
}
